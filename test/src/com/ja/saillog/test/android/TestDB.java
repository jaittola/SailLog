package com.ja.saillog.test.android;

import java.io.File;
import java.io.IOException;

import junit.framework.Assert;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.test.AndroidTestCase;

import com.ja.saillog.DB;
import com.ja.saillog.ExportFile;

public class TestDB extends AndroidTestCase {

    private class PositionContainer {
        public PositionContainer(double latitude, double longitude, double bearing, double speed) {
            myLat = latitude;
            myLong = longitude;
            myBearing = bearing;
            mySpeed = speed;
        }
        
        public double myLat;
        public double myLong;
        public double myBearing;
        public double mySpeed;
    }
    
    private class EventContainer {
        public EventContainer(int engine, int sailplan) {
            myEngine = engine;
            mySailplan = sailplan;
        }
        
        public int myEngine;
        public int mySailplan;
    }
    
    protected void setUp() throws Exception {
        super.setUp();

        dbif = new DB(mContext, "SLDB-test.db");    
    }

    protected void tearDown() throws Exception {
        SQLiteDatabase db = dbif.getWritableDatabase();
        String dbPath = db.getPath();
        db.close();

        new File(dbPath).delete();

        super.tearDown();
    }

    public void testDbSetUp() {
        SQLiteDatabase db = dbif.getWritableDatabase();

        String[] expectedTables = { 
                "trip",
                "position",
                "event",
        };
        checkTablesExist(db, expectedTables);
    }

    public void testTempTripInsertAndFetch() {
        dbif.insertTrip("Test trip");
        int id = dbif.fetchTripId("Test trip");

        Assert.assertTrue("Expecting trip id greater than zero, got " + id, id > 0);
    }

    public void testNonExistentTrip() {
        int id = dbif.fetchTripId("Does not exist");

        Assert.assertTrue("Expecting trip id smaller than zero, got" + id, id < 0);
    }
    
    public void testPositionInsert() {
        int tripId = insertPositionsAndEvents();

        String selectionArgs[] = { Integer.toString(tripId) };

        SQLiteDatabase db = dbif.getReadableDatabase();
        Cursor c = db.rawQuery("SELECT trip_id, position_id, pos_time, latitude, " + 
                "longitude, speed, bearing FROM position WHERE " + 
                "trip_id = ?" +
                "ORDER BY position_id",
                selectionArgs);
        Assert.assertTrue(c.moveToFirst());
        
        long lastPositionId = 0;
        
        Assert.assertEquals(c.getCount(), posS.length);
        
        int row = 0;
        do {
            checkColumnsNotNull(c);
            
            Assert.assertEquals(tripId, c.getInt(0));
            lastPositionId = c.getInt(1);
            // We skip the timestamp because it is generated
            // automatically by the database.
            Assert.assertEquals(posS[row].myLat, c.getDouble(3));
            Assert.assertEquals(posS[row].myLong, c.getDouble(4));
            Assert.assertEquals(posS[row].mySpeed, c.getDouble(5), 0.01);
            Assert.assertEquals(posS[row].myBearing, c.getDouble(6), 0.01);
            
            row++;
        } while(c.moveToNext());
               
        c.close();
        
        // Test the query for the largest position id.
        Assert.assertEquals(lastPositionId, dbif.fetchLastPositionId(null));
    }

    public void testLastPositionWithEmptyDb() {
        long lastPositionId = dbif.fetchLastPositionId(null);
        
        Assert.assertEquals(lastPositionId, 0);
    }
    
    public void testInsertEvent() {
        int tripId = insertPositionsAndEvents();
        String selectionArgs[] = { Integer.toString(tripId) };

        SQLiteDatabase db = dbif.getReadableDatabase();
        Cursor c = db.rawQuery("SELECT event_id, trip_id, position_id, event_time, engine, sailplan " +
                "FROM event WHERE " + 
                "trip_id = ? " +
                "ORDER BY event_id",
                selectionArgs);
        Assert.assertTrue(c.moveToFirst());
        
        Assert.assertEquals(c.getCount(), eventS.length);
        
        int row = 0;
        do {
            checkColumnsNotNull(c);
            
            // Checking skipped for 
            //  - event id: it is the autogenerated primary key
            //  - position id: would require comparing against the position table,
            //    but we get the position id as the last value of the position
            //    table.
            //  - event_time: autogenerated timestamp.
            Assert.assertEquals(tripId, c.getInt(1));
            Assert.assertEquals(eventS[row].myEngine, c.getLong(4));
            Assert.assertEquals(eventS[row].mySailplan, c.getLong(5));
            
            row++;
        } while (c.moveToNext());
        
        c.close();
    }
    
    
    public void testDbExport() {
        File dbCopy = null;

        try {
            dbif.insertTrip("Something to export");

            ExportFile ef = null;

            try {
                ef = new ExportFile("db");
                dbif.exportDbAsSQLite(ef);
            } catch (IOException iox) {
                Assert.assertTrue("Got io exception: " + iox.toString(), false);
            }

            dbCopy = new File(ef.fileName());
            File origDb = new File(dbif.getReadableDatabase().getPath());

            // Just compare sizes.
            Assert.assertEquals(String.format("The sizes of the original (%s) and db copy (%s) differ. ", 
                                              origDb.getAbsolutePath(), ef.fileName()), 
                                              origDb.length(), dbCopy.length());	    
            Assert.assertTrue("The database copy is empty", dbCopy.length() > 0);
        }
        finally {
            dbCopy.delete();
        }
    }

    private void checkTablesExist(SQLiteDatabase db, String[] requiredTables) {
        for (String table: requiredTables) {
            SQLiteStatement stm = db.compileStatement(String.format("select count(*) from sqlite_master where type = 'table' and name = '%s'", table));
            int tablesFound = (int) stm.simpleQueryForLong();
            Assert.assertEquals(String.format("Table %s not found; ", table), 1, tablesFound);
        }
    }
    
    private int insertPositionsAndEvents() {
        dbif.insertTrip("Position test trip");
        int tripId = dbif.fetchTripId("Position test trip");
        Assert.assertTrue(tripId > 0);
   
        for (int i = 0; i < posS.length; ++i) {
            dbif.insertPosition(tripId, 
                                posS[i].myLat, 
                                posS[i].myLong, 
                                posS[i].myBearing, 
                                posS[i].mySpeed);
            dbif.insertEvent(tripId, 
                             eventS[i].myEngine,
                             eventS[i].mySailplan);
        }
        
        return tripId;
    }
    
    private void checkColumnsNotNull(Cursor c) {
        for (int col = 0; col < c.getColumnCount(); ++col) {
            Assert.assertFalse(c.isNull(col));
        }
    }

    private DB dbif;

    // Note, it is assumed in this class that the posS and eventS arrays 
    // are of the same length.
    private PositionContainer[] posS = {
        new PositionContainer(60.1, 24.9, 350, 4),
        new PositionContainer(60.6, 25.0, 25.0, 4.2),
    };
    
    private EventContainer[] eventS = {
            new EventContainer(1, 0),
            new EventContainer(0, 2),
    };
}
